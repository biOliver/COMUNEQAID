rule all:
    input:
        'success/cleanup_complete.txt'

rule compile:
    input:
        'ready/ready.txt'
    output:
        temp('success/compile-app-data_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    log:
        'logs/00_compile-app-data.log'
    script:
        'code/00_compile-app-data.py'

rule fastqs:
    input:
        rules.compile.output
    output:
        temp('success/make-fastqs_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    log:
        'logs/01_make-fastqs.log'
    threads:
        80
    script:
        'code/01_make-fastqs.py'

rule fastqc:
    input:
        rules.fastqs.output
    output:
        temp('success/fastqc_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    script:
        'code/02_fastqc.py'

rule quant:
    input:
        rules.fastqs.output
    output:
        temp('success/map-quant_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    conda:
        'COMUNEQAID_R.yaml'
    log:
        'logs/02_map-quant.log'
    threads:
        76
    script:
        'code/02_map-quant.py'

rule update:
    input:
        rules.quant.output
    output:
        temp('success/update-pool-table_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    conda:
        'COMUNEQAID_R.yaml'
    log:
        'logs/03_update-pool-table.log'
    script:
        'code/03_update-pool-table.R'

rule seurat:
    input:
        rules.update.output
    output:
        temp('success/make-seurat_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    conda:
        'COMUNEQAID_R.yaml'
    log:
        'logs/04_make-seurat.log'
    script:
        'code/04_make-seurat.R'

rule aggregate:
    input:
        rules.seurat.output
    output:
        temp('success/aggregate_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    conda:
        'COMUNEQAID_R.yaml'
    log:
        'logs/05_aggregate.log'
    script:
        'code/05_aggregate.R'

#rule integrate:
#    input:
#        rules.aggregate.output
#    output:
#        temp('success/integrate_complete.txt')
#    params:
#        scopID = config['scopID'],
#        comID = config['comID'],
#        userID = config['userID']
#    log:
#        'logs/06_integrate.log'
#    script:
#        'code/06_integrate.R'

rule cleanup:
    input:
        #rules.integrate.output
        rules.aggregate.output,
        rules.fastqc.output
    output:
        temp('success/cleanup_complete.txt')
    params:
        scopID = config['scopID'],
        comID = config['comID'],
        userID = config['userID']
    script:
        'code/07_cleanup.py'

